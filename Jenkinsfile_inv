pipeline {
    agent any
    environment {
        JENKINS_ID = sh(returnStdout: true, script: 'id jenkins -u').trim()
        JENKINS_GID = sh(returnStdout: true, script: 'id jenkins -g').trim()
        TERRAFORM_VM_COUNT = 4
        TERRAFORM_VM_IP_BASE = "192.168.1.4"
    }
    stages {
    	stage('Gerando_Imagem_Kubespray') {
            steps {
                dir("${env.WORKSPACE}/kubespray") {
                    sh '[ -d .git ] || git init'
                    sh 'git config http.sslVerify false'
                    checkout([  $class: "GitSCM",
                            branches: [[name: "refs/tags/${KUBESPRAY_VERSION}"]],
                            extensions: [[$class: "CloneOption", shallow: false, depth: 0, reference: ""]],
                            userRemoteConfigs: [[url: "https://github.com/kubespray/kubespray.git"]]
                            ])
                    sh 'sed -e "/ENV LANG=C.UTF-8/d" -e "/^FROM/a ENV LANG=C.UTF-8" -i Dockerfile'
                    sh 'docker build -t ks .'
                }
            }
        }
        stage('Configurando_Cluster_Kubernetes') {
            agent {
                docker { 
                    image 'ks:latest'
                    args '-i --privileged -u 0:0 --network host --entrypoint='
                }
            }	    
            steps {
                dir("${env.WORKSPACE}/kubernetes") {
                    sh 'export ANSIBLE_HOST_KEY_CHECKING=False ; ansible-playbook -i inventory.ini --user=${TERRAFORM_VM_PROFILE_USER} --become --become-user=root \
                        --private-key=id_rsa --extra-var kube_network_plugin=$K8S_CNI --extra-var kube_version=$K8S_VERSION \
                        --extra-var metrics_server_enabled=$K8S_METRICS_SERVER_ENABLED /kubespray/cluster.yml' 
                    sh 'rm -f admin.conf || true'
                    sh 'export ANSIBLE_HOST_KEY_CHECKING=False ; ansible -i inventory.ini --user=${TERRAFORM_VM_PROFILE_USER} --become --become-user=root \
			--private-key=id_rsa -m fetch -a "src=/etc/kubernetes/admin.conf dest=./ flat=yes" \
                        $(cat inventory.ini |grep -v "^$" | fgrep "[kube-master]" -A1 | tail -1)'
                    sh 'chown ${JENKINS_ID}:${JENKINS_GID} admin.conf'
                    sh 'chmod 600 admin.conf'		
                }
            }
        }
    }
}
